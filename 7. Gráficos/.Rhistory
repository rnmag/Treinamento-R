theme_classic() +
theme(legend.title = element_blank(),
legend.position = "bottom",
plot.subtitle = element_text(face = "italic")) +
transition_reveal(as.integer(Data))
anim_save()
anim_save("temas.gif")
getwd()
sessionInfo(sessionInfo())
sessionInfo()
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
temas <- c("Caso Vale-Brumadinho",
"Reforma da Previdência",
"Caso Queiroz-Flávio Bolsonaro",
"Crise Venezuela")
bd <- read_excel("C:/Users/IBUREAU33/Desktop/Frequência de temas - Janeiro.xlsx",
col_types = c("numeric", "date", "text", "text", "text",
"text", "text", "numeric", "text", "numeric")) %>%
filter(Tag %in% temas)
freq <- as.data.frame(table(bd$Data, bd$Tag)) %>%
rename(Data = Var1, Notícia = Var2, Frequência = Freq)
freq$Data <- as.Date(as.character(freq$Data))
ggplot(freq, aes(x = Data, y = Frequência, group = as.character(Notícia))) +
geom_line(aes(color = Notícia), size = 1.3) +
labs(x = NULL,
y = NULL,
title = "Temas mais Comuns",
subtitle = "Evolução no mês dos temas mais frequentes nas manchetes") +
scale_color_brewer(palette = "PuOr") +
theme_classic() +
theme(legend.title = element_blank(),
legend.position = "bottom",
plot.subtitle = element_text(face = "italic")) +
transition_reveal(as.integer(Data))
library(gganimate)
ggplot(freq, aes(x = Data, y = Frequência, group = as.character(Notícia))) +
geom_line(aes(color = Notícia), size = 1.3) +
labs(x = NULL,
y = NULL,
title = "Temas mais Comuns",
subtitle = "Evolução no mês dos temas mais frequentes nas manchetes") +
scale_color_brewer(palette = "PuOr") +
theme_classic() +
theme(legend.title = element_blank(),
legend.position = "bottom",
plot.subtitle = element_text(face = "italic")) +
transition_reveal(as.integer(Data))
sessionInfo()
sessionInfo()
3+3
sessionInfo()
sessionInfo
2*78
mean(c(1, 3, 5))
install.packages("swirl")
library(swirl)
install_course("R Programming")
swirl()
5+8
5+7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
swirl()
library(swirl)
swirl()
library("swirl")
library("swirl")
library(swirl)
sessionInfo()
install.packages("revealjs")
loibrary(revealjs)
library(revealjs)
sessioninfo()
sessionInfo()
sessionInfo()
g1
g1()
?globalenv
sessionInfo()
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", mytest2.R)
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
file.path(folder1, folder2)
file.path("folder1", "folder2")
?dir.create
nxt()
skip()
skip()
estadao.com
swirl()
sessionInfo()
sessionInfo()
x <- c(2, 4, 6, 8)
y <- c(TRUE, TRUE, FALSE, TRUE)
sum(x[y])
sessioninfo()
sessionInfo()
sessionInfo()
citation()
?citation
citation("dplyr")
sessionInfo()
citation
seq(2, 11, 3)
rep(1:4, 3)
rep(1:4, each = 3)
?rep
rep(from = 1, to = 4, times = 3)
rep(from = 1:4, times = 3)
rep(1:4, times = 3)
bd <- mtcars
nova_bd <- bd[bd$mpg > 15 & bd$mpg < 20]
bd <- mtcars
nova_bd <- bd[bd$mpg > 15 & bd$mpg < 20]
nova_bd <- bd[bd$mpg > 15 | bd$mpg < 20]
summary(bd$mpg)
typeof(bd$mpg)
nova_bd <- bd[bd$mpg > 15 & bd$mpg < 20,]
?mtcars
ex_5 <- bd[bd$cyl == 6 & bd$am == 0]
bd <- mtcars
bd <- mtcars
ex_4 <- bd[bd$mpg > 15 & bd$mpg < 20,]
ex_5 <- bd[bd$cyl == 6 & bd$am == 0]
View(ex_5)
ex_5 <- bd[bd$cyl == 6 & bd$am == 0,]
View(ex_5)
ex_6 <- bd[bd$gear == 0 | bd$carb == 0]
View(ex_6)
ex_6 <- bd[bd$gear == 0 | bd$carb == 0,]
bd <- mtcars
ex_6 <- bd[bd$gear == 0 | bd$carb == 0,]
View(bd)
ex_7 <- bd[c(FALSE, TRUE),]
View(ex_7)
View(bd)
bd[bd$am == 0] <- 2
bd[bd$am == 0,] <- 2
View(bd)
sessionInfo()
sessionInfo()
cadeiras <- c(55, 54, 38, 35, 34, 33, 32, 31, 30, 28, 27, 13, 11, 10, 10, 10, 8, 8, 8, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1)
sum(cadeiras)
prop_cadeiras <- cadeiras/sum(cadeiras) # cálculo das proporções de cadeiras de cada partido
sum(prop_cadeiras)
NEP <- 1 / sum(prop_cadeiras^2)
NEP
cadeiras <- c(55, 54, 38, 35, 34, 33, 32, 31, 30, 28, 27, 13, 11, 10, 10, 10, 8, 8, 8, 8, 7, 6, 5, 4, 3, 2, 1, 1, 1)
prop_cadeiras <- cadeiras/sum(cadeiras) # cálculo das proporções de cadeiras de cada partido
prop_cadeiras_quad <- prop_cadeiras^2
NEP <- 1 / sum(prop_cadeiras_quad) # aplicação da fórmula
NEP
# No R, geralmente existe mais de um jeito de fazer as coisas. Esta é outra alternativa de cálculo, resolvendo a conta em uma linha
1 / sum(cadeiras/sum(cadeiras)^2)
# No R, geralmente existe mais de um jeito de fazer as coisas. Esta é outra alternativa de cálculo, resolvendo a conta em uma linha
1 / (sum(cadeiras/sum(cadeiras)^2))
cadeiras/sum(cadeiras)^2
# No R, geralmente existe mais de um jeito de fazer as coisas. Esta é outra alternativa de cálculo, resolvendo a conta em uma linha
1 / sum((cadeiras/sum(cadeiras))^2)
substitute(5 -> x)
?substitute
sessionInFO()
sessionInfo()
sessionInfo()
sessionInfo()
if(!require("tweenr"))install.packages("tweenr")
if (!require("tweenr")) install.packages("tweenr")
# fonte: https://pradeepadhokshaja.wordpress.com/2017/04/06/visualizing-the-law-of-large-numbers-using-gganimate/
if (!require("tweenr")) install.packages("tweenr")
library(ggplot2)
library(gganimate)
library(dplyr)
n = 500
pHeads = .5
flipSequence = sample(x = c(0,1),
prob = c(1 - pHeads, pHeads),
size = n,
replace = T)
r = cumsum(flipSequence)
n = 1:n
runProp = r/n
flip_data <- data.frame(run = 1:500, prop = runProp)
g <- ggplot(flip_data,aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE)) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_bw()
gganimate(g, "attempt_cumulative.mp4", title_frame = FALSE, interval = 0.1)
ggplot(flip_data,aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE)) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_bw() +
transition_reveal(prop)
# fonte: https://pradeepadhokshaja.wordpress.com/2017/04/06/visualizing-the-law-of-large-numbers-using-gganimate/
if (!require("tweenr")) install.packages("tweenr")
library(ggplot2)
library(gganimate)
library(dplyr)
n = 500
pHeads = .5
flipSequence = sample(x = c(0,1),
prob = c(1 - pHeads, pHeads),
size = n,
replace = T)
r = cumsum(flipSequence)
n = 1:n
runProp = r/n
flip_data <- data.frame(run = 1:500, prop = runProp)
ggplot(flip_data,aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE)) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_bw() +
transition_reveal(run)
ggplot(flip_data,aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE)) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_bw() +
transition_reveal(run)
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE, size = 2)) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_bw() +
transition_reveal(run)
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 2) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_bw() +
transition_reveal(run)
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_bw()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_ipsum_rc()
if (!require("hrbrthemes")) install.packages("hrbrthemes")
hrbrthemes::import_roboto_condensed()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_ipsum_rc()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_ipsum_rc()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_ipsum()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Running Proportion Heads of Unbiased Coin") +
ylab("Proportion of Heads") +
xlab("Flip Number") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5) +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "gray", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "blue", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.5) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.3) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
if (!require("Cairo")) install.packages("Cairo")
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.3) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1.2) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic()
ggplot(flip_data, aes(x = run, y = prop, frame = run)) +
geom_path(aes(cumulative = TRUE), size = 1) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic() +
transition_reveal(run)
# if (!require("Cairo")) install.packages("Cairo")
library(ggplot2)
# Para replicar a simuação
set.seed(1234)
n <- 500 # número de jogadas
p_cara <- .5 # probabilidade d esair cara
# Simulação das jogadas
simul <- sample(x = c(0,1),
prob = c(1 - p_cara, p_cara),
size = n,
replace = TRUE)
r <- cumsum(flipSequence) # prob acumulada
n = 1:n
# Simulação das jogadas
simul <- sample(x = c(0,1),
prob = c(1 - p_cara, p_cara),
size = n,
replace = TRUE)
r <- cumsum(simul) # prob acumulada
n = 1:n
v_esperado = r/n # valor esperado para cada jogada
# Jogando a simulação em um banco de dados
bd <- data.frame(jogada = 1:500, prop = v_esperado)
# Animação
p <- ggplot(bd, aes(x = jogada, y = prop, frame = jogada)) +
geom_path(aes(cumulative = TRUE), size = 1) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic() +
transition_reveal(jogada)
p
View(bd)
# Para replicar a simuação
set.seed(1234)
n <- 500 # número de jogadas
p_cara <- .5 # probabilidade d esair cara
# Simulação das jogadas
simul <- sample(x = c(0,1),
prob = c(1 - p_cara, p_cara),
size = n,
replace = TRUE)
r <- cumsum(simul) # prob acumulada
n = 1:n
v_esperado = r/n # valor esperado para cada jogada
# Jogando a simulação em um banco de dados
bd <- data.frame(jogada = 1:500, prop = v_esperado)
View(bd)
# Animação
p <- ggplot(bd, aes(x = jogada, y = prop, frame = jogada)) +
geom_path(aes(cumulative = TRUE), size = 1) + xlim(1, 500) + ylim(0.0, 1.0) +
geom_hline(yintercept = 0.5, color = "red", linetype = "dashed") +
ggtitle("Proporção de caras quando jogamos uma moeda") +
ylab("Proporção de caras") +
xlab("Jogadas") +
theme_classic() +
transition_reveal(jogada)
p
sessionoInfo()
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
sessionInfo()
library(ggplot2)
View(mpg)
?mog
?mpg
p <- ggplot(data = mpg) + # gráfico-base
geom_point(mapping = aes(x = displ, y = hwy)) # insere uma camada de pontos
p
ggplot(data = mpg) +
p
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy), se = FALSE)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy), se = TRUE)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
theme_bw()
?theme
?diamonds
View(diamonds)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut), fill = "red")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut)) +
coord_polar()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut)) +
coord_pie()
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut)) +
coord_polar(start=0)
if (!require(dplyr)) install.packages("dplyr") # para transformar variáveis
if (!require(lubridate)) install.packages("lubridate") # transformar textos em datas
if (!require(ggrepel)) install.packages("ggrepel") # para manipular rótulos
if (!require(gridExtra)) install.packages("gridExtra") # para juntar gráficos
troops <- read.table("minard/troops.txt", header = TRUE, stringsAsFactors = FALSE)
cities <- read.table("minard/cities.txt", header = TRUE, stringsAsFactors = FALSE)
temps <- read.table("minard/temps.txt", header = TRUE, stringsAsFactors = FALSE) %>%
mutate(date = dmy(date)) # formatação da data
troops <- read.table("minard/troops.txt", header = TRUE, stringsAsFactors = FALSE)
cities <- read.table("minard/cities.txt", header = TRUE, stringsAsFactors = FALSE)
temps <- read.table("minard/temps.txt", header = TRUE, stringsAsFactors = FALSE) %>%
mutate(date = dmy(date)) # formatação da data
setwd("V:/Treinamento-R/Aula 8")
troops <- read.table("minard/troops.txt", header = TRUE, stringsAsFactors = FALSE)
cities <- read.table("minard/cities.txt", header = TRUE, stringsAsFactors = FALSE)
temps <- read.table("minard/temps.txt", header = TRUE, stringsAsFactors = FALSE) %>%
mutate(date = dmy(date)) # formatação da data
View(temps)
View(troops)
