regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
# Carregar candidaturas de 2018 e criar novas variáveis
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO") %>%
# Criar variáveis de Incumbência e Resultado
mutate(INCUMBENTE = case_when(CPF_CANDIDATO %in% eleitos_2014$CPF_CANDIDATO ~ "Sim",
TRUE ~ "Não"),
RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"),
VEREADOR = case_when(DESCRICAO_OCUPACAO == "VEREADOR" ~ "Sim",
TRUE ~ "Não"),
EMPRESARIO = case_when(DESCRICAO_OCUPACAO == "EMPRESÁRIO" ~ "Sim",
TRUE ~ "Não"),
P_MILITAR = case_when(DESCRICAO_OCUPACAO == "POLICIAL MILITAR" ~ "Sim",
TRUE ~ "Não"),
E_SUPERIOR = case_when(DESCRICAO_GRAU_INSTRUCAO == "SUPERIOR COMPLETO " ~ "Sim",
TRUE ~ "Não"),
N_BRANCO = case_when(DESCRICAO_COR_RACA == "BRANCA" ~ "Não",
TRUE ~ "Sim")) %>%
# Deixar no banco apenas as variáveis que nos interessam
select(c("UF",
"INCUMBENTE",
"NOME_URNA_CANDIDATO",
"SIGLA_PARTIDO",
"DES_SITUACAO_CANDIDATURA",
"DESCRICAO_OCUPACAO",
"IDADE_DATA_ELEICAO",
"DESCRICAO_SEXO",
"DESCRICAO_GRAU_INSTRUCAO",
"DESCRICAO_ESTADO_CIVIL",
"DESCRICAO_COR_RACA",
"DESC_SIT_TOT_TURNO",
"VEREADOR",
"EMPRESARIO",
"P_MILITAR",
"E_SUPERIOR",
"N_BRANCO",
"RESULTADO",
"QTDE_VOTOS")) %>%
# Calcular o percentual de votos de cada candidato
group_by(UF) %>%
mutate(VOTOS_VALIDOS = sum(QTDE_VOTOS)) %>%
ungroup() %>%
mutate(VOTOS_PERC = QTDE_VOTOS/VOTOS_VALIDOS*100)
candidatos_2018 <- candidatos_2018 %>%
mutate(INCUMBENTE = relevel(factor(INCUMBENTE), ref = "Não"),
DESCRICAO_ESTADO_CIVIL = relevel(factor(DESCRICAO_ESTADO_CIVIL), ref = "SOLTEIRO(A)"),
DESCRICAO_SEXO = relevel(factor(DESCRICAO_SEXO), ref = "MASCULINO"),
DESCRICAO_COR_RACA = relevel(factor(DESCRICAO_COR_RACA), ref = "BRANCA"),
VEREADOR = relevel(factor(VEREADOR), ref = "Não"),
EMPRESARIO = relevel(factor(EMPRESARIO), ref = "Não"),
P_MILITAR = relevel(factor(P_MILITAR), ref = "Não"),
E_SUPERIOR = relevel(factor(E_SUPERIOR), ref = "Não"),
RESULTADO = relevel(factor(RESULTADO), ref = "Não Eleito"),
N_BRANCO = relevel(factor(N_BRANCO), ref = "Não"))
library(tidyverse)
library(cepespR)
# Identificar deputados eleitos em 2014, para saber quem são os incumbentes em 2018
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
# Carregar candidaturas de 2018 e criar novas variáveis
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO") %>%
# Criar variáveis de Incumbência e Resultado
mutate(INCUMBENTE = case_when(CPF_CANDIDATO %in% eleitos_2014$CPF_CANDIDATO ~ "Sim",
TRUE ~ "Não"),
RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"),
VEREADOR = case_when(DESCRICAO_OCUPACAO == "VEREADOR" ~ "Sim",
TRUE ~ "Não"),
EMPRESARIO = case_when(DESCRICAO_OCUPACAO == "EMPRESÁRIO" ~ "Sim",
TRUE ~ "Não"),
P_MILITAR = case_when(DESCRICAO_OCUPACAO == "POLICIAL MILITAR" ~ "Sim",
TRUE ~ "Não"),
E_SUPERIOR = case_when(DESCRICAO_GRAU_INSTRUCAO == "SUPERIOR COMPLETO " ~ "Sim",
TRUE ~ "Não"),
RACA = case_when(DESCRICAO_COR_RACA == "BRANCA" ~ "Branco",
TRUE ~ "Não branco")) %>%
# Deixar no banco apenas as variáveis que nos interessam
select(c("UF",
"INCUMBENTE",
"NOME_URNA_CANDIDATO",
"SIGLA_PARTIDO",
"DES_SITUACAO_CANDIDATURA",
"DESCRICAO_OCUPACAO",
"IDADE_DATA_ELEICAO",
"DESCRICAO_SEXO",
"DESCRICAO_GRAU_INSTRUCAO",
"DESCRICAO_ESTADO_CIVIL",
"DESCRICAO_COR_RACA",
"DESC_SIT_TOT_TURNO",
"VEREADOR",
"EMPRESARIO",
"P_MILITAR",
"E_SUPERIOR",
"RACA",
"RESULTADO",
"QTDE_VOTOS")) %>%
# Calcular o percentual de votos de cada candidato
group_by(UF) %>%
mutate(VOTOS_VALIDOS = sum(QTDE_VOTOS)) %>%
ungroup() %>%
mutate(VOTOS_PERC = QTDE_VOTOS/VOTOS_VALIDOS*100)
candidatos_2018 <- candidatos_2018 %>%
mutate(INCUMBENTE = relevel(factor(INCUMBENTE), ref = "Não"),
DESCRICAO_ESTADO_CIVIL = relevel(factor(DESCRICAO_ESTADO_CIVIL), ref = "SOLTEIRO(A)"),
DESCRICAO_SEXO = relevel(factor(DESCRICAO_SEXO), ref = "MASCULINO"),
DESCRICAO_COR_RACA = relevel(factor(DESCRICAO_COR_RACA), ref = "BRANCA"),
VEREADOR = relevel(factor(VEREADOR), ref = "Não"),
EMPRESARIO = relevel(factor(EMPRESARIO), ref = "Não"),
P_MILITAR = relevel(factor(P_MILITAR), ref = "Não"),
E_SUPERIOR = relevel(factor(E_SUPERIOR), ref = "Não"),
RESULTADO = relevel(factor(RESULTADO), ref = "Não Eleito"),
RACA = relevel(factor(RACA), ref = "Branco"))
m_mult <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA, data = candidatos_2018)
get_regression_table(m_mult)
m_mult %>% dwplot() +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_classic() +
theme(legend.position = "none")
m_int <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA,
data = candidatos_2018)
get_regression_table(m_int)
.45 - .092
.45 - .209
.45 - .092 - .209 - .006
m_int %>% dwplot() +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_classic() +
theme(legend.position = "none")
names(candidatos_2018)
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO + P_MILITAR + E_SUPERIOR + factor(UF),
data = candidatos_2018)
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO + P_MILITAR + E_SUPERIOR,
data = candidatos_2018)
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL,
data = candidatos_2018)
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR,
data = candidatos_2018)
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO ,
data = candidatos_2018)
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO + P_MILITAR ,
data = candidatos_2018)
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO + P_MILITAR + E_SUPERIOR,
data = candidatos_2018)
m_compl <- lm(VOTOS_PERC ~ E_SUPERIOR,
data = candidatos_2018)
table(candidatos_2018$E_SUPERIOR)
library(tidyverse)
library(cepespR)
# Identificar deputados eleitos em 2014, para saber quem são os incumbentes em 2018
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
# Carregar candidaturas de 2018 e criar novas variáveis
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO") %>%
# Criar variáveis de Incumbência e Resultado
mutate(INCUMBENTE = case_when(CPF_CANDIDATO %in% eleitos_2014$CPF_CANDIDATO ~ "Sim",
TRUE ~ "Não"),
RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"),
VEREADOR = case_when(DESCRICAO_OCUPACAO == "VEREADOR" ~ "Sim",
TRUE ~ "Não"),
EMPRESARIO = case_when(DESCRICAO_OCUPACAO == "EMPRESÁRIO" ~ "Sim",
TRUE ~ "Não"),
P_MILITAR = case_when(DESCRICAO_OCUPACAO == "POLICIAL MILITAR" ~ "Sim",
TRUE ~ "Não"),
E_SUPERIOR = case_when(DESCRICAO_GRAU_INSTRUCAO == "SUPERIOR COMPLETO" ~ "Sim",
TRUE ~ "Não"),
RACA = case_when(DESCRICAO_COR_RACA == "BRANCA" ~ "Branco",
TRUE ~ "Não branco")) %>%
# Deixar no banco apenas as variáveis que nos interessam
select(c("UF",
"INCUMBENTE",
"NOME_URNA_CANDIDATO",
"SIGLA_PARTIDO",
"DES_SITUACAO_CANDIDATURA",
"DESCRICAO_OCUPACAO",
"IDADE_DATA_ELEICAO",
"DESCRICAO_SEXO",
"DESCRICAO_GRAU_INSTRUCAO",
"DESCRICAO_ESTADO_CIVIL",
"DESCRICAO_COR_RACA",
"DESC_SIT_TOT_TURNO",
"VEREADOR",
"EMPRESARIO",
"P_MILITAR",
"E_SUPERIOR",
"RACA",
"RESULTADO",
"QTDE_VOTOS")) %>%
# Calcular o percentual de votos de cada candidato
group_by(UF) %>%
mutate(VOTOS_VALIDOS = sum(QTDE_VOTOS)) %>%
ungroup() %>%
mutate(VOTOS_PERC = QTDE_VOTOS/VOTOS_VALIDOS*100)
candidatos_2018 <- candidatos_2018 %>%
mutate(INCUMBENTE = relevel(factor(INCUMBENTE), ref = "Não"),
DESCRICAO_ESTADO_CIVIL = relevel(factor(DESCRICAO_ESTADO_CIVIL), ref = "SOLTEIRO(A)"),
DESCRICAO_SEXO = relevel(factor(DESCRICAO_SEXO), ref = "MASCULINO"),
DESCRICAO_COR_RACA = relevel(factor(DESCRICAO_COR_RACA), ref = "BRANCA"),
VEREADOR = relevel(factor(VEREADOR), ref = "Não"),
EMPRESARIO = relevel(factor(EMPRESARIO), ref = "Não"),
P_MILITAR = relevel(factor(P_MILITAR), ref = "Não"),
E_SUPERIOR = relevel(factor(E_SUPERIOR), ref = "Não"),
RESULTADO = relevel(factor(RESULTADO), ref = "Não Eleito"),
RACA = relevel(factor(RACA), ref = "Branco"))
candidatos_2018
library(moderndive)
m_biv <- lm(QTDE_VOTOS ~ DESCRICAO_SEXO, data = candidatos_2018)
get_regression_table(m_biv)
summary(candidatos_2018$VOTOS_PERC)
m_mult <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA, data = candidatos_2018)
get_regression_table(m_mult)
# install.packages("dotwhisker")
library(dotwhisker)
m_mult %>% dwplot() +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_classic() +
theme(legend.position = "none")
m_int <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA,
data = candidatos_2018)
get_regression_table(m_int)
m_int %>% dwplot() +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_classic() +
theme(legend.position = "none")
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO + P_MILITAR + E_SUPERIOR,
data = candidatos_2018)
get_regression_table(m_int)
get_regression_table(m_compl)
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO + P_MILITAR + E_SUPERIOR + factor(UF),
data = candidatos_2018)
get_regression_table(m_compl)
m_compl %>% dwplot() +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_classic() +
theme(legend.position = "none")
library(tidyverse)
library(cepespR)
# Identificar deputados eleitos em 2014, para saber quem são os incumbentes em 2018
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
# Carregar candidaturas de 2018 e criar novas variáveis
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO") %>%
# Criar variáveis de Incumbência e Resultado
mutate(INCUMBENTE = case_when(CPF_CANDIDATO %in% eleitos_2014$CPF_CANDIDATO ~ "Sim",
TRUE ~ "Não"),
RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"),
VEREADOR = case_when(DESCRICAO_OCUPACAO == "VEREADOR" ~ "Sim",
TRUE ~ "Não"),
EMPRESARIO = case_when(DESCRICAO_OCUPACAO == "EMPRESÁRIO" ~ "Sim",
TRUE ~ "Não"),
E_SUPERIOR = case_when(DESCRICAO_GRAU_INSTRUCAO == "SUPERIOR COMPLETO" ~ "Sim",
TRUE ~ "Não"),
RACA = case_when(DESCRICAO_COR_RACA == "BRANCA" ~ "Branco",
TRUE ~ "Não branco")) %>%
# Deixar no banco apenas as variáveis que nos interessam
select(c("UF",
"INCUMBENTE",
"NOME_URNA_CANDIDATO",
"SIGLA_PARTIDO",
"DES_SITUACAO_CANDIDATURA",
"DESCRICAO_OCUPACAO",
"IDADE_DATA_ELEICAO",
"DESCRICAO_SEXO",
"DESCRICAO_GRAU_INSTRUCAO",
"DESCRICAO_ESTADO_CIVIL",
"DESCRICAO_COR_RACA",
"DESC_SIT_TOT_TURNO",
"VEREADOR",
"EMPRESARIO",
"E_SUPERIOR",
"RACA",
"RESULTADO",
"QTDE_VOTOS")) %>%
# Calcular o percentual de votos de cada candidato
group_by(UF) %>%
mutate(VOTOS_VALIDOS = sum(QTDE_VOTOS)) %>%
ungroup() %>%
mutate(VOTOS_PERC = QTDE_VOTOS/VOTOS_VALIDOS*100)
candidatos_2018 <- candidatos_2018 %>%
mutate(INCUMBENTE = relevel(factor(INCUMBENTE), ref = "Não"),
DESCRICAO_ESTADO_CIVIL = relevel(factor(DESCRICAO_ESTADO_CIVIL), ref = "SOLTEIRO(A)"),
DESCRICAO_SEXO = relevel(factor(DESCRICAO_SEXO), ref = "MASCULINO"),
DESCRICAO_COR_RACA = relevel(factor(DESCRICAO_COR_RACA), ref = "BRANCA"),
VEREADOR = relevel(factor(VEREADOR), ref = "Não"),
EMPRESARIO = relevel(factor(EMPRESARIO), ref = "Não"),
P_MILITAR = relevel(factor(P_MILITAR), ref = "Não"),
E_SUPERIOR = relevel(factor(E_SUPERIOR), ref = "Não"),
RESULTADO = relevel(factor(RESULTADO), ref = "Não Eleito"),
RACA = relevel(factor(RACA), ref = "Branco"))
library(tidyverse)
library(cepespR)
# Identificar deputados eleitos em 2014, para saber quem são os incumbentes em 2018
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
# Carregar candidaturas de 2018 e criar novas variáveis
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO") %>%
# Criar variáveis de Incumbência e Resultado
mutate(INCUMBENTE = case_when(CPF_CANDIDATO %in% eleitos_2014$CPF_CANDIDATO ~ "Sim",
TRUE ~ "Não"),
RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"),
VEREADOR = case_when(DESCRICAO_OCUPACAO == "VEREADOR" ~ "Sim",
TRUE ~ "Não"),
EMPRESARIO = case_when(DESCRICAO_OCUPACAO == "EMPRESÁRIO" ~ "Sim",
TRUE ~ "Não"),
E_SUPERIOR = case_when(DESCRICAO_GRAU_INSTRUCAO == "SUPERIOR COMPLETO" ~ "Sim",
TRUE ~ "Não"),
RACA = case_when(DESCRICAO_COR_RACA == "BRANCA" ~ "Branco",
TRUE ~ "Não branco")) %>%
# Deixar no banco apenas as variáveis que nos interessam
select(c("UF",
"INCUMBENTE",
"NOME_URNA_CANDIDATO",
"SIGLA_PARTIDO",
"DES_SITUACAO_CANDIDATURA",
"DESCRICAO_OCUPACAO",
"IDADE_DATA_ELEICAO",
"DESCRICAO_SEXO",
"DESCRICAO_GRAU_INSTRUCAO",
"DESCRICAO_ESTADO_CIVIL",
"DESCRICAO_COR_RACA",
"DESC_SIT_TOT_TURNO",
"VEREADOR",
"EMPRESARIO",
"E_SUPERIOR",
"RACA",
"RESULTADO",
"QTDE_VOTOS")) %>%
# Calcular o percentual de votos de cada candidato
group_by(UF) %>%
mutate(VOTOS_VALIDOS = sum(QTDE_VOTOS)) %>%
ungroup() %>%
mutate(VOTOS_PERC = QTDE_VOTOS/VOTOS_VALIDOS*100)
candidatos_2018 <- candidatos_2018 %>%
mutate(INCUMBENTE = relevel(factor(INCUMBENTE), ref = "Não"),
DESCRICAO_ESTADO_CIVIL = relevel(factor(DESCRICAO_ESTADO_CIVIL), ref = "SOLTEIRO(A)"),
DESCRICAO_SEXO = relevel(factor(DESCRICAO_SEXO), ref = "MASCULINO"),
DESCRICAO_COR_RACA = relevel(factor(DESCRICAO_COR_RACA), ref = "BRANCA"),
VEREADOR = relevel(factor(VEREADOR), ref = "Não"),
EMPRESARIO = relevel(factor(EMPRESARIO), ref = "Não"),
E_SUPERIOR = relevel(factor(E_SUPERIOR), ref = "Não"),
RESULTADO = relevel(factor(RESULTADO), ref = "Não Eleito"),
RACA = relevel(factor(RACA), ref = "Branco"))
candidatos_2018
library(moderndive)
m_biv <- lm(QTDE_VOTOS ~ DESCRICAO_SEXO, data = candidatos_2018)
get_regression_table(m_biv)
summary(candidatos_2018$VOTOS_PERC)
m_mult <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA, data = candidatos_2018)
get_regression_table(m_mult)
# install.packages("dotwhisker")
library(dotwhisker)
m_mult %>% dwplot() +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_classic() +
theme(legend.position = "none")
m_int <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA,
data = candidatos_2018)
get_regression_table(m_int)
m_int %>% dwplot() +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_classic() +
theme(legend.position = "none")
m_compl <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO + E_SUPERIOR + factor(UF),
data = candidatos_2018)
get_regression_table(m_compl)
m_logit <- glm(RESULTADO ~ DESCRICAO_SEXO + RACA + DESCRICAO_SEXO:RACA + DESCRICAO_ESTADO_CIVIL + VEREADOR + EMPRESARIO + E_SUPERIOR + factor(UF),
data = candidatos_2018,
family = "binomial")
get_regression_table(m_compl)
m_logit %>% dwplot() +
geom_vline(xintercept = 0, colour = "grey60", linetype = 2) +
theme_classic() +
theme(legend.position = "none")
.24/4
library(tidyverse)
library(cepespR)
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"))
View(eleitos_2014)
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito")
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO")
View(candidatos_2018)
# Carregar candidaturas de 2018 e criar novas variáveis
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO") %>%
# Criar variáveis de Incumbência e Resultado
mutate(INCUMBENTE = case_when(CPF_CANDIDATO %in% eleitos_2014$CPF_CANDIDATO ~ "Sim",
TRUE ~ "Não"),
RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"),
VEREADOR = case_when(DESCRICAO_OCUPACAO == "VEREADOR" ~ "Sim",
TRUE ~ "Não"),
EMPRESARIO = case_when(DESCRICAO_OCUPACAO == "EMPRESÁRIO" ~ "Sim",
TRUE ~ "Não"),
E_SUPERIOR = case_when(DESCRICAO_GRAU_INSTRUCAO == "SUPERIOR COMPLETO" ~ "Sim",
TRUE ~ "Não"),
RACA = case_when(DESCRICAO_COR_RACA == "BRANCA" ~ "Branco",
TRUE ~ "Não branco")) %>%
# Deixar no banco apenas as variáveis que nos interessam
select(c("UF",
"INCUMBENTE",
"NOME_URNA_CANDIDATO",
"SIGLA_PARTIDO",
"DES_SITUACAO_CANDIDATURA",
"DESCRICAO_OCUPACAO",
"IDADE_DATA_ELEICAO",
"DESCRICAO_SEXO",
"DESCRICAO_GRAU_INSTRUCAO",
"DESCRICAO_ESTADO_CIVIL",
"DESCRICAO_COR_RACA",
"DESC_SIT_TOT_TURNO",
"VEREADOR",
"EMPRESARIO",
"E_SUPERIOR",
"RACA",
"RESULTADO",
"QTDE_VOTOS")) %>%
# Calcular o percentual de votos de cada candidato
group_by(UF) %>%
mutate(VOTOS_VALIDOS = sum(QTDE_VOTOS)) %>%
ungroup() %>%
mutate(VOTOS_PERC = QTDE_VOTOS/VOTOS_VALIDOS*100)
m_biv <- lm(QTDE_VOTOS ~ DESCRICAO_SEXO, data = candidatos_2018)
summary(m_biv)
sessionInfo()
View(candidatos_2018)
candidatos_2018 %>% filter(RESULTADO == "Eleito") %>% arrange(QTDE_VOTOS) %>% glimpse
candidatos_2018 %>% filter(RESULTADO == "Eleito") %>% arrange(QTDE_VOTOS) %>% head
View(candidatos_2018 %>% filter(RESULTADO == "Eleito") %>% arrange(QTDE_VOTOS) %>% head)
