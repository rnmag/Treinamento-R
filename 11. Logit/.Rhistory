.[[2]] %>%
as_tibble() %>%
mutate(`Área de Atuação` = gsub("([a-z])([A-Z])", "\\1 \\2",
`Área de Atuação`),
`Base Eleitoral` =  gsub("([a-z])([A-Z])", "\\1 \\2",
`Base Eleitoral`)) %>%
mutate_at(1:3, stringi::stri_trans_general, "Latin-ASCII")
colnames(df) <- stringi::stri_trans_general(colnames(df), "Latin-ASCII")
if (!is.null(legis) | !interactive()) {
if (legis < 15) webpage <- FALSE
}
url <- paste0(base, "filtroNome=", nome, "&filtroAreaAtuacao=&filtroBaseEleitoral=&filtroPartido=", num_partido, "&filtroLegislatura=", legis, "&filtroEmExercicio=on&filtroEmExercicioPesquisa=&filtroLegislaturaAtual=S")
read_html(url) %>%
html_node(css = "#conteudo > div.row > div.col-lg-9 > form > table.tabela > tbody > tr > td:nth-child(1) > a") %>%
html_attr("href") -> href
weburl <- paste0("https://www.al.sp.gov.br", href)
dep <- read_html(weburl)
bio <- dep %>%
html_nodes("p") %>%
`[[`(2) %>%
html_text() %>%
str_remove_all("\\r") %>% str_remove_all("\\n") %>%
str_remove_all("\\t") %>%
str_trim()
foto <- dep %>%
html_node(".img-thumbnail") %>%
html_attr("src")
info <- function(path){
x <- dep %>%
html_nodes(xpath = path) %>%
html_attr("value")
}
nome <- dep %>% html_node(xpath = '//*[@id="conteudo"]/div[1]/div[1]/h2') %>%
html_text()
partido <- html_nodes(dep, ".form-control-sm")[2] %>% html_text() %>% str_trim()
base_eleitoral <- html_nodes(dep, ".form-control-sm")[3] %>% html_text() %>% str_trim()
area_atuacao <- html_nodes(dep, ".form-control-sm")[4] %>% html_text() %>% str_trim()
fax <- info('//*[@id="infoGeral"]/div[3]/div[1]/input')
telefone <- info('//*[@id="infoGeral"]/div[3]/div[2]/input')
sala_andar <- info('//*[@id="infoGeral"]/div[3]/div[3]/input')
veiculo <- info('//*[@id="infoGeral"]/div[3]/div[4]/input')
email <- info('//*[@id="infoGeral"]/div[4]/div[1]/input')
niver <- info('//*[@id="infoGeral"]/div[4]/div[2]/input')
if (webpage == TRUE) {
glue::glue('<p>
<img src={foto} style="width:15%;height:15%;">
<br>
<a href={foto}>Alta resolução</a>
<br>
<br>
<b>Nome:</b> {nome}
<br>
<b>Partido:</b> {partido}
<br>
<b>Base Eleitoral:</b> {base_eleitoral}
<br>
<b>Área de Atuação:</b> {area_atuacao}
<br>
<div><b>Telefone:</b> {telefone}</div>
<div><b>E-mail:</b> {email}</div>
<div><b>Aniversário:</b> {niver}</div>
<br>
<b>Bio:</b> {bio}
</p>') %>%
htmltools::HTML() %>%
htmltools::html_print()
}
df <- cbind(df, telefone, email, niver, bio, foto) %>%
rename(deputado = Deputado,
area_atuacao = `Area de Atuacao`,
base_eleitoral = `Base Eleitoral`,
partido = Partido)
return(df)
}
# Exemplos ----
# Ficha de um deputado
ficha("Beth Sahão", legis = 19)
numeros <- 1:1000
numeros
numeros_desc <- 1000:1
numeros_desc
?seq
impares <- seq(from = 1, to = 1000, by = 2)
impares
mean(impares)
teste2 <- seq(from = 1, to = 1000, by = 10)
teste2
teste2 <- seq(from = 0, to = 1000, by = 10)
teste2
?seq
mean(impares)
sd(impares)
range(impares)
IQR(impares)
summary(impares)
t <- NA
typeof(impares)
1/0
nomes <- c("Rafael", "Isllane", "Ana", "Pedro")
nomes
formacao <- c("Ciência Política", "GPP", "Adm Publica", "GPP")
nomes <- c("Rafael", "Isllane", "Ana", "Pedro")
formacao <- c("Ciência Política", "GPP", "Adm Publica", "GPP")
mpo_empresa <- c(3, 10, 10, 1)
equipe_acp <- data.frame(nomes, formacao, tempo_empresa)
tempo_empresa <- c(3, 10, 10, 1)
equipe_acp <- data.frame(nomes, formacao, tempo_empresa)
equipe_acp
View(equipe_acp)
nomes <- c("Rafael", "Isllane", "Ana", "Pedrão")
equipe_acp <- data.frame(nomes, formacao, tempo_empresa)
nrow(equipe_acp)
ncol(equipe_acp)
head(equipe_acp)
?head
head(equipe_acp, 2)
summary(equipe_acp)
impares[287]
impares(seq(1, 1000, 2))
impares <- seq(1, 1000, 2))
impares <- seq(1, 1000, 2)
impares
impares[287]
impares[c(1, 76, 48)] # seleção de diversos números
impares[-c(1:250)] # todos os números menos os 250 primeiros
impares[impares > 900] # apenas valores maiores que 900
View(equipe_acp)
equipe_acp[1, 3]
equipe_acp[2, 2]
equipe_acp[1,] # retorna toda a linha 1
equipe_acp[,3] # retorna toda a coluna 3
equipe_acp[,c(1, 3)] # retorna as colunas 1 e 3
equipe_acp[c(1, 3),] # retorna as colunas 1 e 3
equipe_acp$tempo_empresa
equipe_acp[,3] # mesmo resultado
equipe_acp$nomes
install.packages("googlesheets")
library(googlesheets)
library(dplyr)
gs_ls()
gs_ls()
gs_auth()
gs_auth(new_user = TRUE)
gs_ls()
?gs_read
gs_url
?gs_url
braskem <- gs_url("https://docs.google.com/spreadsheets/d/1Vac79cKMJo7l6LCeN1LODJq1FC1ymAUoi-xjSubP1cE/edit#gid=29415472")
View(braskem)
braskem <- gs_url(link_planilha, ws = "Comissões")
library(googlesheets)
library(dplyr)
braskem <- gs_url(link_planilha) %>%
gs_read(ws = "Comissões")
# Link da planilha
link_planilha <- "https://docs.google.com/spreadsheets/d/1Vac79cKMJo7l6LCeN1LODJq1FC1ymAUoi-xjSubP1cE/edit#gid=29415472"
braskem <- gs_url(link_planilha) %>%
gs_read(ws = "Comissões")
View(braskem)
?gs_read
fpquimica <- braskem %>%
gs_read(ws = "FPQuímica")
financ_campanha <- braskem %>%
gs_read(ws = "Financiamento de Campanha")
comissoes <- braskem %>%
gs_read(ws = "Comissões")
grau_influencia <- braskem %>%
gs_read(ws = "Grau de Influência")
base_eleitoral_e <- braskem %>%
gs_read(ws = "Base Eleitoral (E)")
base_eleitoral_ou <- braskem %>%
gs_read(ws = "Base Eleitoral (E/OU)")
engajamento <- braskem %>%
gs_read(ws = "Engajamento")
votacoes <- braskem %>%
gs_read(ws = "Votações")
indicacoes <- braskem %>%
gs_read(ws = "Indicações")
# Baixar todos os dados de todas as planilhas
braskem <- gs_url("https://docs.google.com/spreadsheets/d/1Vac79cKMJo7l6LCeN1LODJq1FC1ymAUoi-xjSubP1cE/edit#gid=29415472")
# Baixar todos os dados de todas as planilhas
braskem <- gs_url("https://docs.google.com/spreadsheets/d/1Vac79cKMJo7l6LCeN1LODJq1FC1ymAUoi-xjSubP1cE/edit#gid=29415472")
# Um objeto para cada planilha
fpquimica <- braskem %>%
gs_read(ws = "FPQuímica")
financ_campanha <- braskem %>%
gs_read(ws = "Financiamento de Campanha")
comissoes <- braskem %>%
gs_read(ws = "Comissões")
grau_influencia <- braskem %>%
gs_read(ws = "Grau de Influência")
base_eleitoral_e <- braskem %>%
gs_read(ws = "Base Eleitoral (E)")
base_eleitoral_ou <- braskem %>%
gs_read(ws = "Base Eleitoral (E/OU)")
engajamento <- braskem %>%
gs_read(ws = "Engajamento")
votacoes <- braskem %>%
gs_read(ws = "Votações")
votacoes <- braskem %>%
gs_read(ws = "Votações")
indicacoes <- braskem %>%
gs_read(ws = "Indicações")
names(fpquimica)
# Um objeto para cada planilha
fpquimica <- braskem %>%
gs_read(ws = "FPQuímica") %>%
count(Nome)
View(fpquimica)
View(fpquimica)
?count
# Um objeto para cada planilha
fpquimica <- braskem %>%
gs_read(ws = "FPQuímica") %>%
count(Nome, name = "Peso")
View(fpquimica)
# Baixar todos os dados de todas as planilhas
braskem <- gs_url("https://docs.google.com/spreadsheets/d/1Vac79cKMJo7l6LCeN1LODJq1FC1ymAUoi-xjSubP1cE/edit#gid=29415472")
# Um objeto para cada planilha
financ_campanha <- braskem %>%
gs_read(ws = "Financiamento de Campanha") %>%
count(Nome, name = "Peso")
comissoes <- braskem %>%
gs_read(ws = "Comissões") %>%
count(Nome, name = "Peso")
grau_influencia <- braskem %>%
gs_read(ws = "Grau de Influência") %>%
count(Nome, name = "Peso")
base_eleitoral_ou <- braskem %>%
gs_read(ws = "Base Eleitoral (E/OU)") %>%
count(Nome, name = "Peso")
engajamento <- braskem %>%
gs_read(ws = "Engajamento") %>%
count(Nome, name = "Peso")
votacoes <- braskem %>%
gs_read(ws = "Votações") %>%
count(Nome, name = "Peso")
financ_campanha
comissoes
grau_influencia
base_eleitoral_ou
engajamento
votacoes
engajamento <- braskem %>%
gs_read(ws = "Engajamento") %>%
count(Nome, name = "Peso") %>%
mutate(Peso = Peso * 3)
engajamento
# Baixar todos os dados de todas as planilhas
braskem <- gs_url("https://docs.google.com/spreadsheets/d/1Vac79cKMJo7l6LCeN1LODJq1FC1ymAUoi-xjSubP1cE/edit#gid=29415472")
# Um objeto para cada planilha
financ_campanha <- braskem %>%
gs_read(ws = "Financiamento de Campanha") %>%
count(Nome, name = "Pontos") # %>% mutate(Pontos = Pontos * 3)
comissoes <- braskem %>%
gs_read(ws = "Comissões") %>%
count(Nome, name = "Pontos") # %>% mutate(Pontos = Pontos * 3)
grau_influencia <- braskem %>%
gs_read(ws = "Grau de Influência") %>%
count(Nome, name = "Pontos") # %>% mutate(Pontos = Pontos * 3)
base_eleitoral_ou <- braskem %>%
gs_read(ws = "Base Eleitoral (E/OU)") %>%
count(Nome, name = "Pontos") # %>% mutate(Pontos = Pontos * 3)
engajamento <- braskem %>%
gs_read(ws = "Engajamento") %>%
count(Nome, name = "Pontos") # %>% mutate(Pontos = Pontos * 3)
votacoes <- braskem %>%
gs_read(ws = "Votações") %>%
count(Nome, name = "Pontos") # %>% mutate(Pontos = Pontos * 3)
votacoes <- braskem %>%
gs_read(ws = "Votações") %>%
count(Nome, name = "Pontos") # %>% mutate(Pontos = Pontos * 3)
# Juntando todos os critérios
contagem <- bind_rows(financ_campanha,
comissoes,
grau_influencia,
base_eleitoral_ou,
engajamento,
votacoes) %>%
group_by(Nome) %>%
count(Pontos)
conatagem
contagem
?arrange
desc(1:10)
# Juntando todos os critérios
contagem <- bind_rows(financ_campanha,
comissoes,
grau_influencia,
base_eleitoral_ou,
engajamento,
votacoes) %>%
group_by(Nome) %>%
count(Pontos) %>%
arrange(desc(Pontos))
contagem
# Juntando todos os critérios
contagem <- bind_rows(financ_campanha,
comissoes,
grau_influencia,
base_eleitoral_ou,
engajamento,
votacoes) %>%
group_by(Nome) %>%
summarise(Pontos = sum(Pontos)) %>%
arrange(desc(Pontos))
contagem
library(congressbr)
leis_2019 <- cham_plenary_bills(year = 2019)
View(leis_2019)
?cham_plenary_bills
cham_bills(year = "2019")
cham_plenary_bills
leis_2019 <- leis_2019 %>% distinct(bill_id) %>% filter(!grepl("REQ", bill_name))
library(dplyr)
leis_2019 <- leis_2019 %>% distinct(bill_id) %>% filter(!grepl("REQ", bill_name))
leis_2019 <- leis_2019 %>% distinct(bill_id) %>% filter(!str_detect("REQ", bill_name))
library(stringr)
leis_2019 <- leis_2019 %>% distinct(bill_id) %>% filter(!str_detect("REQ", bill_name))
leis_2019 <- leis_2019 %>% distinct(bill_id) %>% filter(!str_detect(bill_name, "REQ"))
View(leis_2019)
leis_2019 <- leis_2019 %>% distinct(bill_id) %>% filter(str_detect(bill_name, "REQ"))
leis_2019 <- leis_2019 %>% distinct(bill_id)
> leis_2019 <- cham_plenary_bills(year = 2019) %>% distinct(bill_id)
> leis_2019 <- cham_plenary_bills(year = 2019)
leis_2019 <- cham_plenary_bills(year = 2019) %>% distinct(bill_id,  .keep_all = TRUE)
View(leis_2019)
leis_2019 <- filter(leis_2019, str_detect(bill_name, "REQ"))
View(leis_2019)
leis_2019 <- cham_plenary_bills(year = 2019) %>% distinct(bill_id,  .keep_all = TRUE)
leis_2019 <- filter(leis_2019, !str_detect(bill_name, "REQ"))
View(leis_2019)
leis_2019 <- cham_plenary_bills(year = 2019) %>% distinct(bill_id,  .keep_all = TRUE) %>% filter(., !str_detect(bill_name, "REQ")) %>% arrange(vote_date)
View(leis_2019)
write.csv2(leis_2019, "votacoes_2019.csv")
eis_2019 <- cham_plenary_bills(year = 2019) %>%
distinct(bill_id,  .keep_all = TRUE)
View(eis_2019)
?str_detect
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
votos <- cham_votes(type = "PEC", number = "6", year = "2019")
View(votos)
?sen_votes
sen <- sen_nominal_votes()
votos <- sen_votes(date = "20191001")
sessionInfo()
library(rvest)
library(mailR)
install.packages("mailR")
library(tidyverse)
library(cepespR)
install.packages("cepespR")
devtools::install_github("Cepesp-Fgv/cepesp-r")
library(cepespR)
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
View(eleitos_2014)
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO") %>%
# Criar variáveis de Incumbência e Resultado
mutate(INCUMBENTE = case_when(CPF_CANDIDATO %in% eleitos_2014$CPF_CANDIDATO ~ "Sim",
TRUE ~ "Não"),
RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"),
VEREADOR = case_when(DESCRICAO_OCUPACAO == "VEREADOR" ~ "Sim",
TRUE ~ "Não"),
EMPRESARIO = case_when(DESCRICAO_OCUPACAO == "EMPRESÁRIO" ~ "Sim",
TRUE ~ "Não"),
E_SUPERIOR = case_when(DESCRICAO_GRAU_INSTRUCAO == "SUPERIOR COMPLETO" ~ "Sim",
TRUE ~ "Não"),
RACA = case_when(DESCRICAO_COR_RACA == "BRANCA" ~ "Branco",
TRUE ~ "Não branco")) %>%
# Deixar no banco apenas as variáveis que nos interessam
select(c("UF",
"INCUMBENTE",
"NOME_URNA_CANDIDATO",
"SIGLA_PARTIDO",
"DES_SITUACAO_CANDIDATURA",
"DESCRICAO_OCUPACAO",
"IDADE_DATA_ELEICAO",
"DESCRICAO_SEXO",
"DESCRICAO_GRAU_INSTRUCAO",
"DESCRICAO_ESTADO_CIVIL",
"DESCRICAO_COR_RACA",
"DESC_SIT_TOT_TURNO",
"VEREADOR",
"EMPRESARIO",
"E_SUPERIOR",
"RACA",
"RESULTADO",
"QTDE_VOTOS")) %>%
# Calcular o percentual de votos de cada candidato
group_by(UF) %>%
mutate(VOTOS_VALIDOS = sum(QTDE_VOTOS)) %>%
ungroup() %>%
mutate(VOTOS_PERC = QTDE_VOTOS/VOTOS_VALIDOS*100)
candidatos_2018 <- candidatos_2018 %>%
mutate(INCUMBENTE = relevel(factor(INCUMBENTE), ref = "Não"),
DESCRICAO_ESTADO_CIVIL = relevel(factor(DESCRICAO_ESTADO_CIVIL), ref = "SOLTEIRO(A)"),
DESCRICAO_SEXO = relevel(factor(DESCRICAO_SEXO), ref = "MASCULINO"),
DESCRICAO_COR_RACA = relevel(factor(DESCRICAO_COR_RACA), ref = "BRANCA"),
VEREADOR = relevel(factor(VEREADOR), ref = "Não"),
EMPRESARIO = relevel(factor(EMPRESARIO), ref = "Não"),
E_SUPERIOR = relevel(factor(E_SUPERIOR), ref = "Não"),
RESULTADO = relevel(factor(RESULTADO), ref = "Não Eleito"),
RACA = relevel(factor(RACA), ref = "Branco"))
library(moderndive)
install.packages("modernDive")
install.packages("moderndive")
m_biv <- lm(QTDE_VOTOS ~ DESCRICAO_SEXO, data = candidatos_2018)
get_regression_table(m_biv)
library(moderndive)
m_biv <- lm(QTDE_VOTOS ~ DESCRICAO_SEXO, data = candidatos_2018)
get_regression_table(m_biv)
m_mult <- lm(VOTOS_PERC ~ DESCRICAO_SEXO + RACA, data = candidatos_2018)
get_regression_table(m_mult)
sessionInfo()
sessionInfo()
library(tidyverse)
if (!require("devtools")) install.packages("devtools")
library(cepespR)
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
View(eleitos_2014)
eleitos_2014 <- get_elections(year = 2014,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
mutate(RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito")) %>%
filter(RESULTADO == "Eleito") %>%
select(CPF_CANDIDATO)
# Carregar candidaturas de 2018 e criar novas variáveis
candidatos_2018 <- get_elections(year = 2018,
position = "Deputado Federal",
regional_aggregation = "Estado",
political_aggregation = "Candidato") %>%
# Selecionar apenas candidaturas homologadas
filter(DES_SITUACAO_CANDIDATURA == "APTO") %>%
# Criar variáveis de Incumbência e Resultado
mutate(INCUMBENTE = case_when(CPF_CANDIDATO %in% eleitos_2014$CPF_CANDIDATO ~ "Sim",
TRUE ~ "Não"),
RESULTADO = case_when(DESC_SIT_TOT_TURNO == "ELEITO POR QP" | DESC_SIT_TOT_TURNO == "ELEITO POR MEDIA" ~ "Eleito",
TRUE ~ "Não Eleito"),
VEREADOR = case_when(DESCRICAO_OCUPACAO == "VEREADOR" ~ "Sim",
TRUE ~ "Não"),
EMPRESARIO = case_when(DESCRICAO_OCUPACAO == "EMPRESÁRIO" ~ "Sim",
TRUE ~ "Não"),
E_SUPERIOR = case_when(DESCRICAO_GRAU_INSTRUCAO == "SUPERIOR COMPLETO" ~ "Sim",
TRUE ~ "Não"),
RACA = case_when(DESCRICAO_COR_RACA == "BRANCA" ~ "Branco",
TRUE ~ "Não branco")) %>%
# Deixar no banco apenas as variáveis que nos interessam
select(c("UF",
"INCUMBENTE",
"NOME_URNA_CANDIDATO",
"SIGLA_PARTIDO",
"DES_SITUACAO_CANDIDATURA",
"DESCRICAO_OCUPACAO",
"IDADE_DATA_ELEICAO",
"DESCRICAO_SEXO",
"DESCRICAO_GRAU_INSTRUCAO",
"DESCRICAO_ESTADO_CIVIL",
"DESCRICAO_COR_RACA",
"DESC_SIT_TOT_TURNO",
"VEREADOR",
"EMPRESARIO",
"E_SUPERIOR",
"RACA",
"RESULTADO",
"QTDE_VOTOS")) %>%
# Calcular o percentual de votos de cada candidato
group_by(UF) %>%
mutate(VOTOS_VALIDOS = sum(QTDE_VOTOS)) %>%
ungroup() %>%
mutate(VOTOS_PERC = QTDE_VOTOS/VOTOS_VALIDOS*100)
View(candidatos_2018)
setwd("//192.168.15.10/conjuntura politica/Treinamento-R/2019-2/11. Logit")
load("Banco_dados_Speck_Mancuso.RData")
View(x)
x <- x %>%
mutate(MOSTVOTEDCANDIDATES = factor(case_when(MOSTVOTEDCANDIDATES == 1 ~ "Sim",
TRUE                     ~ "Não")),
ELECTED = factor(case_when(ELECTED == 1 ~ "Sim",
TRUE         ~ "Não")),
WOMAN = factor(case_when(WOMAN == 1 ~ "Sim",
TRUE       ~ "Não")),
INCUMBENT = factor(case_when(INCUMBENT == 1 ~ "Sim",
TRUE ~ "Não")))
bd_federal <- x %>%
filter(OFFICE == "FEDERAL DEPUTY")
bd_estadual <- x %>%
filter(OFFICE == "ESTATE DEPUTY")
